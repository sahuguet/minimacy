use core.net.http.cli;;
use core.util.json;;
use core.2d.png;;
use core.2d.font;;

const URL = "http://127.0.0.1:8000/stop/A15N";;

const WIDTH=1200;;
const HEIGHT=600;;
const MARGIN_X=15;;
const MARGIN_Y=10;;
const ROW_HEIGHT=40;;


const COLOR_BACKGROUND=0xFFFFFF;; // white color 0x
const COLOR_TEXT=0x000000;;
const COLOR_SEPARATOR=0x000000;;
const COLOR_TITLE=0xc0c080;;

const SUBWAY_LINE_LOGOS = hashmapInit 2 listFromArray arrayMap {"A" "B" "C" "D"} (lambda x = [x bitmapFromPng load (strFormat "icons/subway_line_*.png" x) ]);;

const L_ARROW = bitmapFromPng load "icons/left-arrow-50px.png";;
const R_ARROW = bitmapFromPng load "icons/right-arrow-50px.png";;

const FontText = fontFromBitmap (bitmapFromPng load "fonts/Helvetica_80_256.png");;
const FontFooter = fontFromBitmap (bitmapFromPng load "fonts/Helvetica_20_256.png");;

const BoardTitle="--- Train schedule at 125th st station ---";;

var Index = 0;;

fun displayTrain index line destination departureTime =
    let ((intFromDec departureTime) - time) / 60 -> waitTimeMinutes in
    (
    echoLn strConcat (strConcat line  (strConcat  " : " strBuild waitTimeMinutes ) ) " min";
    bitmapBlit uiBuffer 10 (110*index) + 35 L_ARROW 0 0 100 100 BLEND_ALPHA;
    bitmapFillRectangle uiBuffer 0 index*110 WIDTH 2 COLOR_SEPARATOR nil;
    bitmapBlit uiBuffer 130 (110*index) + 10 (hashmapGet SUBWAY_LINE_LOGOS line) 0 0 100 100 BLEND_ALPHA;
    bitmapTextU8 uiBuffer  80  110*index+15 ALIGN_LEFT (strFormat "*." index+1) FontText COLOR_TEXT nil;
    bitmapTextU8 uiBuffer  250 (110*index)+ 15 ALIGN_LEFT destination FontText COLOR_TEXT nil;
    let (if waitTimeMinutes == 0 then "<1" else strBuild waitTimeMinutes) -> waitTime in
    bitmapTextU8 uiBuffer  (WIDTH-50) (110*index)+15 ALIGN_RIGHT (strFormat "* min" waitTime) FontText COLOR_TEXT nil;
    bitmapFillRectangle uiBuffer 0 (index+1)*110 WIDTH 2 COLOR_SEPARATOR nil;
    );
    uiUpdate;;

const REFRESH_MILLISECONDS = 30000;;


fun mta_time t=
    if t>=0 then
    let date t -> [y month d w h m s] in
    strFormat "*, * * * *:*:* ET"
        Days.w (decNFromInt 2 d) Months.(month-1) (decNFromInt 4 y) (decNFromInt 2 (h-4)) (decNFromInt 2 m) (decNFromInt 2 s);;

fun showTime =
    bitmapFillRectangle uiBuffer 0 HEIGHT-30 WIDTH 30 0xffffff nil;
    echoLn "Showing time ...";
    let mta_time time -> nowTime in (
    bitmapTextU8 uiBuffer  10 HEIGHT-30 ALIGN_LEFT (strFormat "As of *" nowTime) FontFooter 0x0 nil;
    uiUpdate;
    );
    onTimeout 1000 (lambda = showTime);;


fun refresh = 
    set Index = 0;
    echoLn "Refreshing ...";
    let httpGet12 URL -> data in
    //let load "train_schedule.json" -> data in
    // TODO: handle case where the server is down.
        let jsonParse data 0 -> [json next] in (
            let (jsonFieldGet json "trains") -> trains in (
                //echoLn jsonEncodePretty trains;
                bitmapErase uiBuffer COLOR_BACKGROUND;
                for x in jsonListGet trains do (
                   let [
                        (jsonStringGet jsonFieldGet x "line")
                        (jsonStringGet jsonFieldGet x "direction")
                        (jsonStringGet jsonFieldGet x "track")
                        (jsonStringGet jsonFieldGet x "destination")
                        (jsonStringGet jsonFieldGet x "departureTime")
                    ]    -> [line direction track destination departureTime] in (
                    displayTrain Index line destination departureTime;
                    );
                    set Index = Index + 1;
                )
            )
        );
    onTimeout REFRESH_MILLISECONDS (lambda = refresh);;


var StationID @Str;;
var StationName @Str;;

fun run =
    set StationID = head tail args;
	echoLn strFormat "Starting Digital Signage for *." StationID;
    uiStart 0 0 WIDTH HEIGHT nil BoardTitle;
    refresh;
    showTime;
	uiUpdate;;


    // TODOs
    // 1. add auto-refresh every min     [X]
    // 2. add error handling             [ ]
    // 3. board title coming from feed   [ ]